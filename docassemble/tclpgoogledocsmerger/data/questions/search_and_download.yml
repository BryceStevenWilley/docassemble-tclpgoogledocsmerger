---
imports:
  - mammoth
---
features:
  css: bootstrap-multiselect.min.css
  javascript: bootstrap-multiselect.min.js
  # https://davidstutz.github.io/bootstrap-multiselect/#getting-started
---
metadata:
  title: TCLP Search and Download
  short title: Search
---
modules:
  - .test
  - .data
---
features:
  css: bootstrap-multiselect.min.css
  javascript: bootstrap-multiselect.min.js
  # https://davidstutz.github.io/bootstrap-multiselect/#getting-started
---
code: |
  selectable_columns = [
    "GIC Industry",
    'GIC Industry Group',
    'COP26 Net Zero Chapter',
    "NZ Scopes Field",
    'Timeline Main Phase',
    'Timeline Sub-Phase',
    'Practice Area'
  ]
---
objects: 
  - template_file: DAFile
  - filled_template: DADict
  - multi_index: MultiSelectIndex.using(import_path=static_file.path(), cols_with_indices=selectable_columns)
---
objects:
  - static_file: DAStaticFile.using(filename='data/sources/Grid_view.csv')
---
id: Main order block
mandatory: True
code: |
  industry_type
  grab_documents
  download_filled
---
code: |
  airtable_industry_types = multi_index.get_values('GIC Industry')
  nz_scope_types = multi_index.get_values('NZ Scopes Field')
  cop_26_priority_types = multi_index.get_values('COP26 Net Zero Chapter')
  gic_industry_group_types = multi_index.get_values('GIC Industry Group')
  timeline_main_types = multi_index.get_values('Timeline Main Phase')
  timeline_sub_types = multi_index.get_values('Timeline Sub-Phase')
---
code: |
  full_clauses_folder_id = "1YDT_u4AJMzwJKNcAH2naYHhycNd-iHvt"
  all_files = get_files_in_folder(folder_id=full_clauses_folder_id)
---
id: search variables
question: |
  Build a custom climate clause document
subquestion: |
  Use the search options to create your own custom document with climate-friendly terms you 
  can use in your contracts.
fields:
  - Industry: industry_type
    datatype: multiselect
    required: False
    code: |
      airtable_industry_types
  - NZ Scope: nz_scope
    datatype: multiselect
    required: False
    code: |
      nz_scope_types
  - Cop 26 Chapter: cop_26
    datatype: multiselect
    required: False
    code: |
      cop_26_priority_types
  - GIC Industry Group: industry_group
    datatype: multiselect
    required: False
    code: |
      gic_industry_group_types
  - Timeline (Main): timeline_type
    datatype: multiselect
    required: False
    code: |
      timeline_main_types
  - Timeline (Sub): timeline_sub_type
    datatype: multiselect
    required: False
    code: |
      timeline_sub_types
  - no label: accept_gdpr_notice
    datatype: checkboxes
    choices:
      - I have read and understand the [data privacy policy](https://www.example.com)
    minlength: 1
    none of the above: False
    validation messages:
      minlength: |
        You need to accept the data privacy policy to continue.
validation code: |
  if not industry_type.any_true() or nz_scope.any_true() or cop_26.any_true() or industry_group.any_true() or timeline_type.any_true() or timeline_sub_type.any_true():
    validation_error("You need to search for at least one thing")
  # TODO: do we really want to require a search term, or should no limits return
  # everything? currently getting a StopIteration error without this code though
script: |
  <script type="text/javascript">
      $(document).ready(function() {
          $('#aW5kdXN0cnlfdHlwZQ').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});
          $('#bnpfc2NvcGU').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});
          $('#Y29wXzI2').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});
          $('#aW5kdXN0cnlfZ3JvdXA').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});
          $('#dGltZWxpbmVfdHlwZQ').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});       
          $('#dGltZWxpbmVfc3ViX3R5cGU').multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});       
      });
  </script>      
---
id: select rows
code: |
  query_list = []
  for col_name, col_vals in [
        ('GIC Industry', industry_type), 
        ('NZ Scopes Field', nz_scope), 
        ('COP26 Net Zero Chapter', cop_26),
        ('Timeline Main Phase', timeline_type),
        ('Timeline Sub-Phase', timeline_sub_type),
        ('GIC Industry Group', industry_group)]:
    if isinstance(col_vals, DADict):
      if col_vals.any_true():
        query_list.append([col_name, col_vals.true_values()])
    elif col_vals != "":
      query_list.append((col_name, [col_vals]))
  row_ids = multi_index.query(query_list)
  #del query_list
---
id: grab documents
code: |
  all_clause_ids = []
  all_clauses = []
  all_clause_objects = []
  selected_rows = multi_index.get_full_rows(row_ids) 
  for row in selected_rows.iterrows():
    these_ids = []
    g_files = get_files_for_clause(all_files, row[1]["Child's name"])
    if g_files:
      all_clauses.append(row[1]["Child's name"])
    for g_file in g_files:
      if 'id' in g_file:
        these_ids.append(g_file.get('id'))
        all_clause_ids.append(g_file.get('id'))
    if g_files:
      all_clause_objects.append(DAObject(
        name=row[1]["Child's name"],
        files=download_drive_files_docx(these_ids, 'doc_')
      ))
  # all_clause_docs2 = download_drive_files_docx(all_clause_ids, 'doc_')
  
  grab_documents = True
---
id: download filled
event: download_filled
question: |
  % if all_clauses:
  Download Your Completed Document
  % else:
  No matching clauses found.
  % endif
subquestion: |
  % if all_clauses:

  ${ filled_template['final'] }
       
  % endif  
---
attachment:
  variable name: filled_template[i]
  name: Requested Clauses
  filename: requested_clauses
  skip undefined: True
  docx template file: ClausesTemplate.docx
  update references: True

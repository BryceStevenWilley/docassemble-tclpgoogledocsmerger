---
imports:
  - mammoth
  - base64
---
features:
  css: bootstrap-multiselect.min.css
  javascript: bootstrap-multiselect.min.js
  # https://davidstutz.github.io/bootstrap-multiselect/#getting-started
---
metadata:
  title: TCLP Search and Download
  short title: Search
---
modules:
  - .drive_connection
  - .data
---
features:
  css: bootstrap-multiselect.min.css
  javascript: bootstrap-multiselect.min.js
  # https://davidstutz.github.io/bootstrap-multiselect/#getting-started
---
code: |
  selectable_column_info = [
    ('GIC Industry', 'GIC Industry', ''),
    ('GIC Industry Group', 'GIC Industry Group', ''),
    ('COP26 Net Zero Chapter', 'COP26 Net Zero Chapter', ''),
    ('Practice Area', 'Practice Area', ''),
    ('F - Corp Gov', 'Corporate governance', ''),
    ('F - Contract Emissions', 'Contract emissions', ''),
    ('F - Organisation emissions', 'Organisation emissions', ''),
    ('F - Reporting & Disclosures', 'Reporting & Disclosures', ''),
    ('F - Corporate Mechanisms', 'Corporate Mechanisms', ''),
    ('F - Incentives, Enforcement, Disputes', 'Incentives, Enforcement, Disputes', ''),
    ('F - Other environmental function', 'Other environmental function', ''),
    ('F - Pre-contract', 'Pre-contract', ''),
    ('F - Just Transition', 'Just Transition', ''),
    ('F - Resilience & Adaptation', 'Resillence & Adaptation', ''),
    ('F - Biodiversity', 'Biodiversity', ''),
  ]
  selectable_columns = [a for a, _, _ in selectable_column_info]
---
objects: 
  - template_file: DAFile
  - filled_template: DADict
  - multi_index: MultiSelectIndex.using(import_path=static_file.path(), cols_with_indices=selectable_columns)
---
objects:
  - static_file: DAStaticFile.using(filename='data/sources/Grid_view.csv')
---
id: Main order block
mandatory: True
code: |
  accept_gdpr_notice
  grab_documents
  download_filled
---
code: |
  selectable_fields = []
  all_types = {}
  selected_type = {}
  for col, label, _ in selectable_column_info:
    all_types[col] = multi_index.get_values(col)
    selectable_fields.append(
        {'label': label, 'field': f'selected_type["{col}"]', 'datatype': 'multiselect', 
         'required': False, 'code': f'all_types["{col}"]'})
---
code: |
  full_clauses_folder_id = "1YDT_u4AJMzwJKNcAH2naYHhycNd-iHvt"
  all_files = get_files_in_folder(folder_id=full_clauses_folder_id)
---
id: search variables
question: |
  Build a custom climate clause document
subquestion: |
  Use the search options to create your own custom document with climate-friendly terms you 
  can use in your contracts.
fields:
  - code: selectable_fields
  - no label: accept_gdpr_notice
    datatype: checkboxes
    choices:
      - I have read and understand the [data privacy policy](https://www.example.com)
    minlength: 1
    none of the above: False
    validation messages:
      minlength: |
        You need to accept the data privacy policy to continue.
validation code: |
   indiv_any_trues = [a_type.any_true() for a_type in selected_type.values()]
   if not any(indiv_any_trues):
    validation_error("You need to search for at least one thing")
  # TODO: do we really want to require a search term, or should no limits return
  # everything? currently getting a StopIteration error without this code though
script: |
  <script type="text/javascript">
      $(document).ready(function() {
          % for col_name in selectable_columns:
          $("#${ base64.b64encode(str('selected_type["' + col_name + '"]').encode()).decode().replace('=', '') } ").multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true});
          % endfor
      });
  </script>      
---
comment: |
  - Corporate Governance: use_coporate_governance
    datatype: yesnowide
  - Contract emissions: use_contract_emissions
    datatype: yesnowide
  - Organization emissions: use_organization_emissions
    datatype: yesnowide
  - Reporting & Disclosures: use_reporting_and_disclosures
    datatype: yesnowide
  - Corporate Mechanisms: use_roporate_mechanisms
    datatype: yesnowide
  - Incentives, Enforcement, Disputes: use_incentives
    datatype: yesnowide
  - Other environmental function: use_other_environmental_function
    datatype: yesnowide
  - Pre-contract: use_pre_contract
    datatype: yesnowide
  - Just Transition: use_just_transition
    datatype: yesnowide
  - Resillience & Adaptiation: use_resillience
    datatype: yesnowide
  - Biodiversity: use_biodiversity
    datatype: yesnowide
---
id: select rows
code: |
  query_list = []
  for col_name in selectable_columns:
    col_vals = selected_type[col_name]
    if isinstance(col_vals, DADict):
      if col_vals.any_true():
        query_list.append([col_name, col_vals.true_values()])
    elif col_vals != "":
      query_list.append((col_name, [col_vals]))
  row_ids = multi_index.query(query_list)
  #del query_list
---
id: grab documents
code: |
  all_clause_ids = []
  all_clauses = []
  all_clause_objects = []
  selected_rows = multi_index.get_full_rows(row_ids) 
  for row in selected_rows.iterrows():
    these_ids = []
    g_files = get_files_for_clause(all_files, row[1]["Child's name"])
    if g_files:
      all_clauses.append(row[1]["Child's name"])
    for g_file in g_files:
      if 'id' in g_file:
        these_ids.append(g_file.get('id'))
        all_clause_ids.append(g_file.get('id'))
    if g_files:
      all_clause_objects.append(DAObject(
        name=row[1]["Child's name"],
        files=download_drive_files_docx(these_ids, 'doc_')
      ))
  # all_clause_docs2 = download_drive_files_docx(all_clause_ids, 'doc_')
  
  grab_documents = True
---
id: download filled
event: download_filled
question: |
  % if all_clauses:
  Download Your Completed Document
  % else:
  No matching clauses found.
  % endif
subquestion: |
  % if all_clauses:
  
  We found several clauses that matched your query:
  
  % for row in selected_rows.iterrows():
  * ${ row[1].get("Full name", row[1].get("Child's name", '')) }
  
  % endfor

  ${ filled_template['final'] }
       
  % endif  
---
attachment:
  variable name: filled_template[i]
  name: Requested Clauses
  filename: requested_clauses
  skip undefined: True
  docx template file: ClausesTemplate.docx
  update references: True

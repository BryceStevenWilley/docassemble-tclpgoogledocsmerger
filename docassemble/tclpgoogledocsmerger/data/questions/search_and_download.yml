metadata:
  title: TCLP Search and Download
  short title: Serach
---
modules:
  - .test
  - .data
---
code: |
  selectable_columns = [
    "GIC Industry", 'GIC Industry Group', 
    'COP26 Net Zero Chapter', 
    "NZ Scopes Field", 
    'Timeline Main Phase', 'Timeline Sub-Phase', 
    'Practice Area'
  ]
---
objects: 
  - template_file: DAFile
  - filled_template: DADict
  - multi_index: MultiSelectIndex.using('data/sources/Grid_view.csv', cols_with_indices=selectable_columns)
---
objects:
  - static_file: DAStaticFile.using(filename='data/sources/Grid_view.csv')
---
id: Main order block
mandatory: True
code: |
  industry_type
  grab_documents
  download_filled
---
code: |
  airtable_industry_types = multi_index.get_values('GIC Industry')
  nz_scope_types = multi_index.get_values('NZ Scopes Field')
  cop_26_priority_types = multi_index.get_values('COP26 Net Zero Chapter')
  gic_industry_group_types = multi_index.get_values('GIC Industry Group')
  timeline_main_types = multi_index.get_values('Timeline Main Phase')
  timeline_sub_types = multi_index.get_values('Timeline Sub-Phase')
---
code: |
  full_clauses_folder_id = "1YDT_u4AJMzwJKNcAH2naYHhycNd-iHvt"
  all_files = get_files_in_folder(folder_id=full_clauses_folder_id)
---
id: search variables
question: |
  What do you want to search?
subquestion: |
  Select the attributes you want in your clauses
fields:
  - Industry: industry_type
    datatype: dropdown
    required: False
    code: |
      airtable_industry_types
  - NZ Scope: nz_scope
    datatype: dropdown
    required: False
    code: |
      nz_scope_types
  - Cop 26 Priority: cop_26
    datatype: dropdown
    required: False
    code: |
      cop_26_priority_types
  - GIC Industry Group: industry_group
    datatype: dropdown
    required: False
    code: |
      gic_industry_group_types
  - Timeline (Main): timeline_type
    datatype: dropdown
    required: False
    code: |
      timeline_main_types
  - Timeline (Sub): timeline_sub_type
    datatype: dropdown
    required: False
    code: |
      timeline_sub_types
  - All or any?: all_or_any
    datatype: radio
    choices:
      - All: all
      - Any: any
---
id: select rows
code: |
  query_list = []
  for col_name, col_var_name in [
        ('GIC Industry', 'industry_type'), 
        ('NZ Scopes Field', 'nz_scope'), 
        ('COP26 Net Zero Chapter', 'cop_26'),
        ('Timeline Main Phase', 'timeline_type'),
        ('Timeline Sub-Phase', 'timeline_sub_type'),
        ('GIC Industry Group', 'industry_group')]:
    if defined(col_var_name):
      query_list.append((col_var_name, [value(col_var_name)]))

  row_ids = multi_index.query(query_list)
  del query_list
---
id: grab documents
code: |
  all_clause_docs2 = []
  all_clauses = []
  selected_rows = multi_index.get_full_rows(row_ids) 
  ii = 0
  for row in selected_rows.iterrows():
    g_files = get_files_for_clause(all_files, row[1]["Child's name"])
    all_clauses.append(row[1]["Child's name"])
    for g_file in g_files:
      if 'id' in g_file:
        all_clause_docs2.append(download_drive_docx_file(g_file.get('id'), f'doc_{ii}'))
    ii += 1
  grab_documents = True
---
id: download filled
event: download_filled
question: |
  % if all_clauses:
  Download Your Completed Document
  % else:
  No matching clauses found.
  % endif
subquestion: |
  ${ filled_template['final'] }
  
  % for clause_doc in all_clause_docs2:
  * ${ clause_doc }
  % endfor
---
attachment:
  variable name: filled_template[i]
  name: Requested Clauses
  filename: requested_clauses
  skip undefined: True
  docx template file: ClausesTemplate.docx

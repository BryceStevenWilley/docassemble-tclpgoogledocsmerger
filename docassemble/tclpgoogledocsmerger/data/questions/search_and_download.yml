---
include:
    - docassemble.ALToolbox:collapse_template.yml
---
imports:
  - base64
---
modules:
  - .drive_connection
  - .cloudconvert_api
  - .data
  - .merge_docs
---
features:
  css: 
    - bootstrap-multiselect.min.css
    - tclp.css
  javascript: bootstrap-multiselect.min.js
  # https://davidstutz.github.io/bootstrap-multiselect/#getting-started
---
metadata:
  title: Choose your climate clauses
  short title: Choose your climate clauses
  error action: show_failed_screen
  logo: |
      <a href="https://chancerylaneproject.org"><img src="/packagestatic/docassemble.tclpgoogledocsmerger/white_tclp.svg" alt="TCLP Logo" width="151" height="40"></a>
  temporary session: True
  exit url: apps.chancerylaneproject.org/start/clause_search?reset=1
  exit label: Restart
---
code: |
  separate_column_info = [
    ('Practice Area', 'Practice Area', '', False),
    ('GIC Industry', 'Sector', '[More info here](https://en.wikipedia.org/wiki/Global_Industry_Classification_Standard)', False),
    #('GIC Industry Group', 'GIC Industry Group', '[More info here](https://en.wikipedia.org/wiki/Global_Industry_Classification_Standard)', False),
    #('COP26 Net Zero Chapter', 'COP26 Net Zero Chapter', '', False),
  ]
  combined_column_info = [
    ('F - Corp Gov', 'Corporate Governance', '', True),
    ('F - Contract Emissions', 'Contract Emissions', '', True),
    ('F - Organisation emissions', 'Organisation Emissions', '', True),
    ('F - Reporting & Disclosures', 'Reporting & Disclosures', '', True),
    ('F - Corporate Mechanisms', 'Corporate Mechanisms', '', True),
    ('F - Incentives, Enforcement, Disputes', 'Incentives, Enforcement, Disputes', '', True),
    ('F - Other environmental function', 'Other Environmental Func.', '', True),
    #('F - Pre-contract', 'Pre-contract', '', True),
    #('F - Just Transition', 'Just Transition', '', True),
    #('F - Resilience & Adaptation', 'Resillence & Adaptation', '', True),
    #('F - Biodiversity', 'Biodiversity', '', True),
  ]
  separate_columns = [a for a, _, _, _ in separate_column_info]
  combined_columns = [a for a, _, _, _ in combined_column_info]
  selectable_columns = separate_columns + combined_columns
---
mandatory: True
objects:
  - red: DARedis
---
code: |
  use_cloudconvert = init_api(api_key=get_config('cloud convert api key'), sandbox=False)
---
objects:
  - filled_template: DADict
  - multi_index: |
      MultiSelectIndex.using(
          airtable_info=get_config('docs airtable'),
          redis_cache=red, csv_path=grid_file.path(),
          url_file_path=url_file.path(),
          cols_with_indices=selectable_columns)
---
objects:
  - grid_file: DAStaticFile.using(filename='data/sources/Grid_view.csv')
  - url_file: DAStaticFile.using(filename='data/sources/clause_to_url.csv')
  - template_file: DAStaticFile.using(filename='data/templates/ClausesTemplate_fixed.docx')
---
id: Main order block
mandatory: True
code: |
  snapshot_interview_state
  clause_query_params
  reconsider('snapshot_interview_state')
  prep_documents
  if not all_clause_names:
    no_clauses_found
  if the_download_task.ready():
    if the_download_task.failed():
      show_failed_screen
    reached_download_screen = True
    reconsider('snapshot_interview_state')
    download_filled
  else:
    waiting_screen
---
comment: |
  Backup for "the_doc": if something goes wrong in the background task, and
  the_doc isn't created, error out
code: |
  the_doc = DAEmpty()
  show_failed_screen
---
event: show_failed_screen
question: |
  Sorry, something went wrong
subquestion: |
  We had some trouble trying to assemble your document. Restarting might help.
buttons:
  - Restart: restart
---
code: |
  select_fields = []

  # The big, combined one
  combined_selected_vals = DADict('combined_selected_vals', gathered=True)
  all_combined_vals = []
  for col, label, help_link, is_top_level in combined_column_info:
    all_vals = [{'value': f'{col};;;{item}', 'label': item, 'group': label} for item in multi_index.get_values(col)]
    all_combined_vals.extend(all_vals)
  
  select_fields.append(
        {'label': 'Climate Solutions', 'field': f'combined_selected_vals', 
         'datatype': 'multiselect',
         'required': False, 
         'code': 'all_combined_vals',
         'help': """Climate solutions are the mechanisms in TCLP climate clauses that address the climate impact of a transaction. For example, the clauses require parties to set emission reduction targets, take specific actions to reduce or avoid emissions and to report on emissions.

    The clauses may tailor these solutions to a specific sector but it is helpful to be able to search by solution as, once you have decided the solution that suits your own circumstances, you can adapt existing clauses to a different sector or jurisdiction."""})

  # Then the GIC Industry and Practice area
  vals_for_columns = {}
  selected_vals = {}
  for col, label, tooltip, is_top_level in separate_column_info:
    vals_for_columns[col] = multi_index.get_values(col)
    log(f"vals_for_columns[{col}]: {vals_for_columns[col]}")
    field_info = {'label': label, 'field': f'selected_vals["{col}"]', 
                  'datatype': 'multiselect', 
                  'required': False, 'code': f'vals_for_columns["{col}"]'}
    if tooltip:
      field_info['help'] = tooltip 
    select_fields.append(field_info)
---
code: |
  # Take the interesting fields and make them 2 dimensional so easier to view in XLSX
  stuff_to_snapshot = {
     'start_time': str(start_time().format('yyyy-MM-dd')),
     }
  # Get location
  try:
    import requests
    resp = requests.get(f"https://geolocation-db.com/json/{device(ip=True)}&position=true").json()
    stuff_to_snapshot['country'] = resp.get('country_code')
    stuff_to_snapshot['state'] = resp.get('state')
    stuff_to_snapshot['city'] = resp.get('city')
    stuff_to_snapshot['latitude'] = round(resp['latitude'] * 100) / 100 if 'latitude' in resp else None
    stuff_to_snapshot['longitude'] = round(resp['longitude'] * 100) / 100 if 'longitude' in resp else None
  except:
    stuff_to_snapshot['country'] = 'UNKNOWN'
  # Don't let DA parse nameerrors so that all data is recorded in one block,
  # regardless of how far in interview someone got
  try:
    stuff_to_snapshot['all_clauses_names'] = comma_list(all_clause_names)
    stuff_to_snapshot['all_clauses_full_names'] = comma_list(f'"{clause.full_name}"' for clause in all_clause_objects)
    stuff_to_snapshot['selected_rows'] = comma_list([row[1]["Child's name"] for row in selected_rows.iterrows()])
    if defined('selected_vals'):
      for column in selected_vals:
        if selected_vals[column].any_true():
          stuff_to_snapshot[f"column_{column}"] = comma_list(selected_vals[column].true_values())
  except:
    pass

  if defined('email'):
    stuff_to_snapshot['email'] = email
    
  stuff_to_snapshot['reached_download_screen'] = defined('reached_download_screen')
  store_variables_snapshot(
      data=stuff_to_snapshot, persistent=True
     )
  snapshot_interview_state = True
---
code: |
  full_clauses_folder_id = get_config("drive doc bank")
  log(f'Getting clauses from Google Drive folder: {full_clauses_folder_id}')
  # "1-_w_seyUBhzSBb7h9KSz4cA5Z4e24WS1") # rtf'd
  all_files = get_files_in_folder(folder_id=full_clauses_folder_id)
---
id: search variables
question: |
  Choose Climate Clauses
subquestion: |
  The Climate Clause Selector will create a bundle of your clauses to use online or to download as a Word (DOCX) document.
fields:
  - code: select_fields
  - I would like to improve the Climate Clause Selector: submitting_email
    datatype: yesnowide
    required: False
  - no label: accept_gdpr_notice
    datatype: checkboxes
    choices:
      - I have read and understand the [terms of use](https://chancerylaneproject.org/terms-of-use/) and [data privacy policy](https://chancerylaneproject.org/privacy-policy/)
    minlength: 1
    none of the above: False
    show if: submitting_email
    validation messages:
      minlength: |
        You need to accept the data privacy policy to continue.
  - Email: email
    datatype: email
    show if: submitting_email
  - You can mention me and my organisation's participation on the website's list of supporters: can_mention_me
    datatype: yesnowide
    required: False
    show if: submitting_email
continue button label: Download document
continue button field: clause_query_params
validation code: |
   indiv_any_trues = [bool(a_type) and (not isinstance(a_type, list) or a_type.any_true()) for a_type in selected_vals.values()]
   if not any(indiv_any_trues):
    validation_error("You need to search for at least one thing")
  # TODO: do we really want to require a search term, or should no limits return
  # everything? currently getting a StopIteration error without this code though
script: |
  <script type="text/javascript">
     $(document).ready(function() {
          % for col_name in separate_columns:
           $("#${ base64.b64encode(str('selected_vals["' + col_name + '"]').encode()).decode().replace('=', '') } ").multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true, enableClickableOptGroups: true, enableCollapsibleOptGroups: true, collapseOptGroupsByDefault: true});
          % endfor
          $("#${ base64.b64encode('combined_selected_vals'.encode()).decode().replace('=', '') } ").multiselect({enableCaseInsensitiveFiltering: true, inheritClass: true, enableClickableOptGroups: true, enableCollapsibleOptGroups: true, collapseOptGroupsByDefault: true});
      });
  </script>
under: |
  The Climate Clause Selector has been launched in beta. It collates into one downloadable document the TCLP clauses published on our website as at 7 April 2022. Clauses published and updated since 7 April 2022 are not yet included in the Climate Clause Selector. We are are working on adding them to the Climate Clause Selector. In the meantime, to help us improve this tool and develop it further, we would be grateful for your feedback. Please contact [humzah.khan@chancerylaneproject.org](mailto:humzah.khan@chancerylaneproject.org) to provide feedback and suggestions for improvements.
---
id: select rows
code: |
  query_list = []
  for col_name in selected_vals.keys():
    if selected_vals[col_name].any_true():
      query_list.append([[col_name, selected_vals[col_name].true_values()]])
  true_nested_vals = {}
  for col_and_val, selected in combined_selected_vals.items():
    if selected:
      col, val = col_and_val.split(';;;')
      if col in true_nested_vals:
        true_nested_vals[col].append(val)
      else:
        true_nested_vals[col] = [val]
  if true_nested_vals:
    query_list.append([(col_name, vals) for col_name, vals in true_nested_vals.items()])
  row_ids, tags_with_rows = multi_index.query_with_explainations(query_list)
---
id: prep documents
code: |
  url_base_str = 'https://chancerylaneproject.org/climate-clauses/{}'
  gdrive_base_url = 'https://docs.google.com/document/d/{}'
  all_clause_names = []
  all_clause_objects = []
  selected_rows = multi_index.get_full_rows(row_ids)
  for row in selected_rows.iterrows():
    g_file = get_latest_file_for_clause(all_files, row[1]["Child's name"])
    if g_file:
      all_clause_names.append(row[1]["Child's name"])
      modified_time = g_file.get('modifiedTime')
      if row[1].get('Has URL'):
        url = url_base_str.format(row[1].get('URL arg', '').lower().replace(' ', '-').replace('/', '-'))
      else:
        url = gdrive_base_url.format(g_file.get('id'))
      full_name = row[1].get('Full name')
      all_clause_objects.append(DAObject(
        name=row[1]["Child's name"],
        full_name=full_name,
        modified_time=modified_time,
        mimeType=g_file.get('mimeType'),
        url=url,
        docx_link=f'[{full_name}]({url})',
        file_id=g_file.get('id')
      ))
  # Remove docs from tags_with_rows that weren't found on Drive
  all_clause_set = set(all_clause_names)
  all_clause_map = {clause.name: clause.url for clause in all_clause_objects}
  initial_tags = list(tags_with_rows.keys())
  for tag in initial_tags:
    tags_with_rows[tag] = [row for row in tags_with_rows[tag] if row in all_clause_set]
    if not tags_with_rows[tag]:
      tags_with_rows.pop(tag, None)
  del all_clause_set
  prep_documents = True
---
code: |
  the_download_task = background_action('download_task', all_clauses=all_clause_objects)
---
event: download_task
code: |
  use_cloudconvert
  all_clauses = action_argument('all_clauses')
  files = download_drive_docx_wrapper(all_clauses, 'doc_', use_cloudconvert=use_cloudconvert, redis_cache=red)
  for obj, doc_file in zip(all_clauses, files):
    obj.file = doc_file
  the_doc = merge_docs(template_file.path(), all_clauses, tags_with_rows)
  background_response_action('download_resp', the_doc=the_doc) 
---
event: download_resp
code: |
  the_doc = action_argument('the_doc')
  background_response()
---
template: tags_to_docs_template
subject: |
  Clauses organized by tag
content: |
  % for tag, rows in tags_with_rows.items():
  * ${ tag.strip(' -F') }:
  % for row in rows:
      * [${ row }](${ all_clause_map.get(row) })
  % endfor
  % endfor
---
template: individual_list_template
subject: |
  More about each individual clause
content: |
  % for obj in all_clause_objects:
  * [${ obj.name }: ${ obj.full_name }](${obj.url})
      * Modified on ${ format_date(obj.modified_time, format="d MMMM yyyy") }
  % endfor
---
id: no clauses found
event: no_clauses_found
question: | 
  No matching clauses found.
subquestion: |
  We couldn't find anything that matched the attributes that you searched for. Try checking more options.
buttons:
  - Restart: restart
---
event: waiting_screen
id: waiting screen
question: |
  We're compiling your documents
subquestion: |
  This may take a few minutes, so leave this tab open. Thanks for waiting.

  Since this document might contain many clauses, you should consider using the navigation pane when viewing it.
  In Word, you can do this by opening the “View” tab of the ribbon, and checking the “Navigation Pane” checkbox.
  In LibreOffice, you can press F5 or go to View > Navigator to see the equivalent feature.

  You can find an appendix of the documents based on the tags that you searched by at the end of the document.
under: |
  ## ${ individual_list_template.subject }

  ${ individual_list_template.show() }

  ## ${ tags_to_docs_template.subject }

  ${ tags_to_docs_template.show() }

reload: True
---
id: download filled
event: download_filled
question: |
  Download Your Completed Document
subquestion: |
  ${ action_button_html(the_doc.url_for(attachment=True), label="Download your clauses in one document", color="primary", size="lg")}

  Since this document might contain many clauses, you should consider using the navigation pane when viewing it.
  In Word, you can do this by opening the “View” tab of the ribbon, and checking the “Navigation Pane” checkbox.
  In LibreOffice, you can press F5 or go to View > Navigator to see the equivalent feature.

  You can find an appendix of the documents based on the tags that you searched by at the end of the document.
buttons:
  - Assemble another document: restart
under: |
  ## ${ individual_list_template.subject }

  ${ individual_list_template.show() }

  ## ${ tags_to_docs_template.subject }

  ${ tags_to_docs_template.show() }
